
Generate a git patch file (remember to end the diff with --) that will describe project changes aimed to accomplish the following:

<continue here>

Here is the project content for context:

File Path: chrome-extension\background.js

chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    console.log("Messaged received:", message);
    chrome.downloads.download({
        url: message.content,
        filename: message.filename
    });
});
  

File Path: chrome-extension\index.js

let lastCheckedMessageIndex = 0;

function isDiffFormat(code) {
  const diffRegex = /^diff --git a\/.* b\/.*$/m;
  return diffRegex.test(code);
}

function saveToFile(filename, content) {
  const blob = new Blob([content], { type: "text/plain" });
  const url = URL.createObjectURL(blob);

  chrome.storage.sync.get(["savePath"], (result) => {
    const savePath = result.savePath || "";
    const fullPath = savePath + filename;
    const message = { content: url, filename: fullPath };

    console.log("Sending content to clipboard:", content);
    navigator.clipboard.writeText(content);
    

    console.log("Sending message to background worker:", message);
    chrome.runtime.sendMessage(message);

    URL.revokeObjectURL(url);
  });
}

function checkIfGenerating() {
  const streamingBlocks = document.getElementsByClassName("result-streaming");
  const buttons = document.getElementsByTagName("button");
  let generating = false;

  for (let i = 0; i < buttons.length; i++) {
    if (buttons[i].textContent === "Stop generating") {
      generating = true;
    }
  }

  if (streamingBlocks.length) {
    generating = true;
  }

  if (generating) {
    console.log("Still generating a response. Aborting check.");
  }

  return generating;
}

function checkNewMessages() {
  console.log("Checking for new messages...");

  if (checkIfGenerating()) return;

  const messages = document.querySelectorAll(".markdown");

  console.log("messages found:", messages);
  console.log("lastCheckedMessageIndex:", lastCheckedMessageIndex);

  for (let i = lastCheckedMessageIndex; i < messages.length; i++) {
    const message = messages[i];
    const codeElement = message.querySelector("pre code");

    console.log("codeElement", codeElement);

    if (codeElement) {
      const code = codeElement.textContent;

      if (isDiffFormat(code)) {
        const filename = `contrail.patch`;

        saveToFile(filename, code);
      }
    } else {
      console.log("Diff format code not found within block, continuing.");
    }
  }

  lastCheckedMessageIndex = messages.length;
}

chrome.storage.sync.get(["savePath", "checkInterval"], (result) => {
  const savePath = result.savePath || "";
  const checkInterval = (result.checkInterval || 5) * 1000;

  console.log("Initialized ChatGPT Code Monitor");
  console.log(
    "Options:\n\nsavePath:",
    savePath,
    "\n\ncheckInterval:",
    checkInterval / 1000
  );

  // Check for new messages based on the stored interval
  setInterval(checkNewMessages, checkInterval);
});


File Path: chrome-extension\manifest.json

{
  "manifest_version": 3,
  "name": "ChatGPT Code Monitor",
  "version": "1.0.0",
  "description": "Monitor ChatGPT conversation for diff format code and save it to a file.",
  "icons": {
    "48": "contrail.png"
  },
  "content_scripts": [
    {
      "matches": ["*://*.openai.com/*"],
      "js": ["index.js"],
      "run_at": "document_end"
    }
  ],
  "background": {
    "service_worker": "background.js"
  },
  "permissions": ["downloads", "storage"],
  "host_permissions": [ "<all_urls>" ],
  "options_ui": {
    "page": "options.html",
    "open_in_tab": true
  }
}


File Path: chrome-extension\options.css

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #222;
    color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.container {
    width: 80%;
    max-width: 800px;
    padding: 20px;
    background-color: #333;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
    border-radius: 5px;
}

h1 {
    font-size: 24px;
    margin-bottom: 30px;
}

.form-group {
    display: flex;
    flex-flow: column;
    margin-bottom: 20px;
}

label {
    display: block;
    font-size: 16px;
    margin-bottom: 5px;
}

input {
    font-size: 16px;
    padding: 8px;
    margin-bottom: 15px;
    background-color: #444;
    border: 1px solid #555;
    color: #fff;
}

button {
    font-size: 16px;
    padding: 8px 16px;
    background-color: #3b98e2;
    color: #fff;
    border: none;
    cursor: pointer;
    transition: background-color 0.2s;
    border-radius: 5px;
}

button:hover {
    background-color: #2d78b9;
}


File Path: chrome-extension\options.html

<!DOCTYPE html>
<html>
<head>
    <title>ChatGPT Code Monitor Options</title>
    <link rel="stylesheet" href="options.css" />
</head>
<body>
<div class="container">
    <h1>ChatGPT Code Monitor Options</h1>
    <div class="form-group">
        <label for="savePath">Save path (must begin and end with /):</label>
        <input type="text" id="savePath" />
    </div>
    <div class="form-group">
        <label for="checkInterval">Check interval (in seconds):</label>
        <input type="number" id="checkInterval" min="1" />
    </div>
    <button id="saveButton">Save</button>
</div>
<script src="options.js"></script>
</body>
</html>


File Path: chrome-extension\options.js

document.getElementById("saveButton").addEventListener("click", () => {
  const savePath = document.getElementById("savePath").value;
  const checkInterval = parseInt(
    document.getElementById("checkInterval").value,
    10
  );

  chrome.storage.sync.set({ savePath, checkInterval }, () => {
    console.log(`Save path set to: ${savePath}`);
    console.log(`Check interval set to: ${checkInterval} seconds`);
  });
});


File Path: chrome-extension\README.md

# ChatGPT Code Monitor

ChatGPT Code Monitor is a browser extension that monitors ChatGPT conversations for diff format code and saves it to a file.

## Installation

1. Clone the repository to your local machine.
2. Load the extension into your browser as an unpacked extension:
   - For Chrome:
     - Navigate to `chrome://extensions`.
     - Enable Developer Mode by clicking the toggle switch.
     - Click "Load unpacked" and select the `chrome-extension` folder in the project directory.

## Usage

When a ChatGPT conversation contains diff format code, the extension will automatically save it as a `.patch` file to the specified save path. The extension checks for new messages every 5 seconds.

## Configuration

You can configure the save path for the generated files and the interval for checking new messages through the extension's options page:

1. Open the ChatGPT Code Monitor Options page.
2. Enter the desired save path in the "Save path" input field.
3. Enter the desired check interval in seconds in the "Check interval" input field.
4. Click "Save" to save your changes.


